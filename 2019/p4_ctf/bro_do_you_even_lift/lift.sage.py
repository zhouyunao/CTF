
# This file was *autogenerated* from the file lift.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_100 = Integer(100); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15)#flag = int(open('flag.txt','r').read().encode("hex"),16)
flag = int('p4{fffffffffffffffffffffff}'.encode("hex"),_sage_const_16 )
ranges = int(log(flag,_sage_const_2 ))
p = next_prime(ZZ.random_element(_sage_const_2 **_sage_const_15 , _sage_const_2 **_sage_const_16 ))
k = _sage_const_100 
N = p**k
d = _sage_const_5 
P = PolynomialRing(Zmod(N), implementation='NTL', names=('x',)); (x,) = P._first_ngens(1)
pol = _sage_const_0 
for c in range(d):
    pol += ZZ.random_element(_sage_const_2 **ranges, _sage_const_2 **(ranges+_sage_const_1 ))*x**c
print(pol)
remainder = pol(flag)
print(remainder)
pol = pol - remainder
print(pol(flag))
assert pol(flag) == _sage_const_0 

print(p)
print(pol)

